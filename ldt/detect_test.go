package ldt

import (
	"encoding/json"
	"io"
	"os"
	"testing"
)

func cfne(a, b float64) bool {
	if a < b {
		return b-a > 0.01
	}
	return a-b > 0.01
}

func TestDetect(t *testing.T) {
	tests := []struct {
		s string
		w Info
	}{
		{"цДЫуБЧуБжуБДуВЛ I Love You.", Info{Jpn, 0.62}},
		{"Adem├бs de todo lo anteriormente dicho, tambi├йn encontramos...", Info{Spa, 0.62}},
		{"рдмрд╣реБрдд рдмрд╣реБрдд (рдзрдиреНрдпрд╡рд╛рдж / рд╢реБрдХреНрд░рд┐рдпрд╛)!", Info{Hin, 0.74}},
		{"рдЕрдиреБрдЪреНрдЫреЗрдж рез, рд╕рдмрд╣рд┐ рд▓реЛрдХрд╛рдирд┐ рдЖрдЬрд╛рджреЗ рдЬрдореНрдореЗрд▓рд╛ рдЖрдУрд░ рдУрдЦрд┐рдирд┐рдпреЛ рдХреЗ рдмрд░рд╛рдмрд░ рд╕рдореНрдорд╛рди рдЖрдУрд░ рдЕрдШреНрдХрд╛рд░ рдкреНрд░рд╛рдкреНрдд рд╣рд╡реЗред рдУрдЦрд┐рдирд┐рдпреЛ рдХреЗ рдкрд╛рд╕ рд╕рдордЭ-рдмреВрдЭ рдЖрдУрд░ рдЕрдВрдд,рдХрд░рдг рдХреЗ рдЖрд╡рд╛рдЬ рд╣реЛрдЦрддрд╛ рдЖрдУрд░ рд╣реБрдирдХреЛ рдХреЗ рджреЛрд╕рд░рд╛ рдХреЗ рд╕рд╛рде рднрд╛рдИрдЪрд╛рд░реЗ рдХреЗ рдмреЗрд╡рд╣рд╛рд░ рдХрд░реЗ рдХреЗ рд╣реЛрдЦрд▓рд╛", Info{Bho, 1}},
		{"сКвсЙ╡сЛосМ╡сЛл сКасННсИксЙГ сЛНсИ╡сМе сКУсЙ╡", Info{Amh, 0.06}},
		{"┘Д╪║╪к┘К ╪з┘Д╪╣╪▒╪и┘К╪й ┘Д┘К╪│╪к ┘Г┘Е╪з ┘К╪м╪и", Info{Arb, 1}},
		{"цИСчИ▒ф╜а", Info{Zho, 1}},
		{"ржЖржорж┐ рждрзЛржорж╛ржХрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕ ", Info{Ben, 1}},
		{"ьЪ╕ыЮАы░ФэЖаые┤", Info{Kor, 1}},
		{"сГзсГХсГФсГЪсГР сГРсГУсГРсГЫсГШсГРсГЬсГШ сГШсГСсГРсГУсГФсГСсГР сГЧсГРсГХсГШсГбсГгсГдсГРсГЪсГШ сГУсГР сГЧсГРсГЬсГРсГбсГмсГЭсГасГШ сГЧсГРсГХсГШсГбсГШ сГжсГШсГасГбсГФсГСсГШсГЧсГР сГУсГР сГгсГдсГЪсГФсГСсГФсГСсГШсГЧ", Info{Kat, 1}},
		{"╬М╬╗╬┐╬╣ ╬┐╬╣ ╬м╬╜╬╕╧Б╧Й╧А╬┐╬╣ ╬│╬╡╬╜╬╜╬╣╬┐╧Н╬╜╧Д╬▒╬╣ ╬╡╬╗╬╡╧Н╬╕╬╡╧Б╬┐╬╣ ╬║╬▒╬╣ ╬п╧Г╬┐╬╣ ╧Г╧Д╬╖╬╜ ╬▒╬╛╬╣╬┐╧А╧Б╬н╧А╬╡╬╣╬▒ ╬║╬▒╬╣ ╧Д╬▒ ╬┤╬╣╬║╬▒╬╣╧О╬╝╬▒╧Д╬▒.", Info{Ell, 1}},
		{"р▓Ор▓▓р│Нр▓▓р▓╛ р▓ор▓╛р▓ир▓╡р▓░ р▓Йр▓Ър▓┐р▓д р▓ор▓др│Нр▓др│Б р▓Шр▓ир▓др│Ж р▓ор▓др│Нр▓др│Б р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓╕р▓ор▓╛р▓и р▓╣р│Бр▓Яр│Нр▓Яр▓┐р▓ж.", Info{Kan, 1}},
		{"роирпАроЩрпНроХро│рпН роЖроЩрпНроХро┐ро▓роорпН рокрпЗроЪрпБро╡рпАро░рпНроХро│ро╛?", Info{Tam, 1}},
		{"р╕бр╕Щр╕╕р╕йр╕вр╣Мр╕Чр╕╕р╕Бр╕Др╕Щр╣Ар╕Бр╕┤р╕Фр╕бр╕▓р╕бр╕╡р╕нр╕┤р╕кр╕гр╕░р╣Бр╕ер╕░р╣Ар╕кр╕бр╕нр╕ар╕▓р╕Др╕Бр╕▒р╕Щр╣Гр╕Щр╕ир╕▒р╕Бр╕Фр╕┤р╣Мр╕ир╕гр╕╡р╣Бр╕ер╕░р╕кр╕┤р╕Чр╕Шр╕┤", Info{Tha, 1}},
		{"ркирк╛ркгрк╛ркВ ркорк╛рк░рк╛ рк▓рлЛрк╣рлАркорк╛ркВ ркЫрлЗ", Info{Guj, 1}},
		{" риЧрйБри░рйВ риЧрйНри░рй░рие ри╕ри╛ри╣ри┐рим риЬрйА", Info{Pan, 1}},
		{"р░ир░ир▒Нр░ир▒Б р░Тр░Вр░Яр░░р░┐р░Чр░╛ р░╡р░жр░┐р░▓р▒Зр░пр▒Н", Info{Tel, 1}},
		{"р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤кр╡Зр┤░р╡Н ?", Info{Mal, 1}},
		{"рморнБ рмдрнБрмормХрнБ рмнрм▓ рмкрм╛рмП |", Info{Ori, 1}},
		{"сАбсАмсА╕сАЬсАпсА╢сА╕сАЬсА░сАЮсАмсА╕сАРсА╜сА▒сАбсАБсАЩсА▓сА╖сАФсА╛сАДсА║сА╖сАВсАпсАПсА║сАЮсАнсААсА╣сАБсАмсАФсА╛сАДсА║сА╖сАЬсА░сА╖сАбсАБсА╜сАДсА║сА╖сАбсАЫсА▒сА╕сАбсАРсА╜сААсА║сАРсАФсА║сА╕сАРсА░сАЦсА╜сАмсА╕сАЩсА╝сАДсА║сААсА╝сАЮсАКсА║сБЛ", Info{Mya, 1}},
		{"р╖Ар╖Щр╢╜р╖Пр╖А р╢Ър╖Тр╢║р╢п?", Info{Sin, 1}},
		{"сЮЦсЮ╜сЮАсЮШсЯЙсЮ╢сЮАсЮБсЯТсЮЙсЮ╗сЯЖсЮЦсЮ╕сЮЪсЮУсЮ╢сЮАсЯЛсЮУсЯБсЯЗ", Info{Khm, 1}},
		{"хЕ╢чЦ╛хжВщвиуАБхЕ╢х╛РхжВцЮЧуАБф╛╡цОахжВчБлуАБф╕НхЛХхжВх▒▒уАБщЫгчЯехжВщЩ░уАБхЛХхжВщЫ╖щЬЗуАВ", Info{Zho, 1}},
		{"чЯех╜╝чЯех╖▒уАБчЩ╛цИ░ф╕НцоЖуАВф╕НчЯех╜╝шАМчЯех╖▒уАБф╕АхЛЭф╕Аш▓ауАВф╕НчЯех╜╝ф╕НчЯех╖▒уАБцпОцИ░х┐ЕцоЖуАВ", Info{Zho, 1}},
		{"цФпщВгуБоф╕Кц╡╖уБоцИЦчФ║уБзуБЩуАВ", Info{Jpn, 1}},
		{"цИЦцЧеуБоцЪоцЦ╣уБоф║ЛуБзуБВуВЛуАВ", Info{Jpn, 1}},
		{"ф╗КцЧеуБп", Info{Jpn, 1}},
		{"уВ│уГ│уГЛуГБуГП", Info{Jpn, 1}},
		{"я╛Ая╛Ея╜╢ я╛Ая╛Ыя╜│", Info{Jpn, 1}},
		{"уБйуБЖуВВуБВуВКуБМуБиуБЖ", Info{Jpn, 1}},
	}

	for i, c := range tests {
		a := Detect(c.s)
		a2 := Detect(c.s)
		// fmt.Println(i, a, a2)
		if a != a2 {
			t.Errorf("#%d Detect(%q) = %v, %v", i, c.s, a, a2)
		}

		if c.w.Lang != a.Lang || cfne(a.Confidence, c.w.Confidence) {
			t.Errorf("#%d Detect(%q) = %v %v, WANT %v %v", i, c.s, LangToString(a.Lang), a.Confidence, LangToString(c.w.Lang), c.w.Confidence)
		}
	}
}

func TestDetectLang(t *testing.T) {
	tests := map[string]Lang{
		"╨в╨░ ╨╜╤Ц╤З╨╛╨│╨╛, ╨▓╤Б╨╡ ╨╜╨╛╤А╨╝╨░╨╗╤М╨╜╨╛. ╨Р ╨▓ ╤В╨╡╨▒╨╡ ╤П╨║?": Ukr,
		"Vouloir, c'est pouvoir":                                Fra,
		"Where there is a will there is a way":                  Eng,
		"Mi ┼Эategas la japanan kaj studas ─Эin kelkajn jarojn ЁЯШК": Epo,
		"Te echo de menos":                                      Spa,
		"Buona notte e sogni d'oro!":                            Ita,
	}

	for text, want := range tests {
		got := DetectLang(text)
		if got != want {
			t.Fatalf("%s want %v got %v", text, LangToString(want), LangToString(got))
		}
	}
}

// Test detect with empty options and supported language and script
func TestDetectWithOptionsEmptySupportedLang(t *testing.T) {
	want := Info{Epo, 0.58}
	got := DetectWithOptions("La viro amas hundojn. Hundo estas la plej bona amiko de viro", Options{Detectors: AllDetectors()})
	if got.Lang != want.Lang || cfne(got.Confidence, want.Confidence) {
		t.Fatalf("want %v %v got %v %v", want.Lang, want.Confidence, got.Lang, got.Confidence)
	}
}

// Test detect with empty options and nonsupported script(Balinese)
func TestDetectWithOptionsEmptyNonSupportedLang(t *testing.T) {
	want := Info{}
	got := DetectWithOptions("смЕсмУснДсм▒смнсмпснДсммсмЬснДсмЪсмж", Options{Detectors: AllDetectors()})
	if got.Lang != want.Lang || cfne(got.Confidence, want.Confidence) {
		t.Fatalf("want %v %v got %v %v", want.Lang, want.Confidence, got.Lang, got.Confidence)
	}
}

func TestDetectWithOptionsWithExcludes(t *testing.T) {
	text := "╫Ф╫Р╫з╫У╫Ю╫Щ╫Ф ╫Ь╫Ь╫й╫Х╫Я ╫Ф╫в╫С╫и╫Щ╫к"

	//All languages with Hebrew text blacklisted ... returns correct script but invalid language
	options1 := Options{
		Excludes: []Lang{Heb, Ydd},
	}

	want := Info{}
	got := DetectWithOptions(text, options1)
	if got.Lang != want.Lang || cfne(got.Confidence, want.Confidence) {
		t.Fatalf("Want %v %v got %v %v", LangToString(want.Lang), want.Confidence, LangToString(got.Lang), got.Confidence)
	}

	text = "Tu me manques"
	want = Info{Ilo, 0.04}
	options3 := Options{
		Excludes: []Lang{Kur},
	}
	got = DetectWithOptions(text, options3)
	if got.Lang != want.Lang || cfne(got.Confidence, want.Confidence) {
		t.Fatalf("Want %v %v got %v %v", LangToString(want.Lang), want.Confidence, LangToString(got.Lang), got.Confidence)
	}
}

func TestWithOptionsWithIncludes(t *testing.T) {
	text := "Mi ne scias!"
	want := Info{Epo, 1}
	options2 := Options{
		Detectors: []Detector{&LatinDetector{}},
		Includes:  []Lang{Epo, Ukr},
	}
	got := DetectWithOptions(text, options2)
	if got.Lang != want.Lang || want.Confidence != got.Confidence {
		t.Fatalf("Want %v %v got %v %v", LangToString(want.Lang), want.Confidence, LangToString(got.Lang), got.Confidence)
	}
}

func TestDetectLangWithOptions(t *testing.T) {
	text := "All evil come from a single cause ... man's inability to sit still in a room"
	want := Eng

	// without excludes
	got := DetectLangWithOptions(text, Options{})
	if want != got {
		t.Fatalf("want %s got %s", LangToString(want), LangToString(got))
	}

	// with excludes
	options := Options{
		Detectors: []Detector{&LatinDetector{}},
		Excludes: []Lang{
			Jav,
			Tgl,
			Nld,
			Uzb,
			Swe,
			Nob,
			Ceb,
			Ilo,
		},
	}

	got = DetectLangWithOptions(text, options)
	if want != got {
		t.Fatalf("want %s got %s", LangToString(want), LangToString(got))
	}
}

func TestWithMultipleExamples(t *testing.T) {
	examplesFile, err := os.Open("testdata/examples.json")
	if err != nil {
		t.Fatal("Error opening testdata/examples.json")
	}

	defer examplesFile.Close()

	byteValue, err := io.ReadAll(examplesFile)
	if err != nil {
		t.Fatal("Error reading testdata/examples.json")
	}

	var examples map[string]string
	err = json.Unmarshal(byteValue, &examples)
	if err != nil {
		t.Fatal("Error Unmarshalling json")
	}

	for lang, text := range examples {
		want := CodeToLang(lang)
		info := Detect(text)
		if info.Lang != want && !info.IsReliable() {
			t.Fatalf("want %v, got %v", Langs[want], Langs[info.Lang])
		}
	}
}
