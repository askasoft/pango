package openai

import (
	"fmt"

	"github.com/askasoft/pango/str"
)

const (
	RoleSystem    = "system"
	RoleUser      = "user"
	RoleAssistant = "assistant"
	RoleTool      = "tool"
	RoleFunction  = "function"
)

type ChatMessage struct {
	// The role of the messages author. One of system, user, assistant, or function.
	Role string `json:"role,omitempty"`

	// The contents of the message. content is required for all messages, and may be null for assistant messages with function calls.
	Content string `json:"content,omitempty"`

	// The name of the author of this message. name is required if role is function, and it should be the name of the function whose response is in the content. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
	Name string `json:"name,omitempty"`

	// Tool call that this message is responding to. required if role is tool.
	ToolCallID string `json:"tool_call_id,omitempty"`
}

type ChatFunction struct {
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name,omitempty"`

	// A description of what the function does, used by the model to choose when and how to call the function.
	Description string `json:"description,omitempty"`

	// The parameters the functions accepts, described as a JSON Schema object. See the guide for examples, and the JSON Schema reference for documentation about the format.
	// To describe a function that accepts no parameters, provide the value {"type": "object", "properties": {}}.
	Parameters map[string]any `json:"parameters,omitempty"`
}

type ChatCompletionRequest struct {
	// A list of messages comprising the conversation so far.
	Messages []*ChatMessage `json:"messages,omitempty"`

	// ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API.
	Model string `json:"model,omitempty"`

	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	// Defaults to 0
	FrequencyPenalty float64 `json:"frequency_penalty,omitempty"`

	// Modify the likelihood of specified tokens appearing in the completion.
	// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	// Defaults to null
	LogitBias any `json:"logit_bias,omitempty"`

	// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message. This option is currently not available on the gpt-4-vision-preview model.
	Logprobs bool `json:"logprobs,omitempty"`

	// An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
	TopLogprobs int `json:"top_logprobs,omitempty"`

	// The maximum number of tokens to generate in the chat completion.
	// The total length of input tokens and generated tokens is limited by the model's context length.
	MaxTokens int `json:"max_tokens,omitempty"`

	// How many chat completion choices to generate for each input message.
	// Defaults to 1
	N int `json:"n,omitempty"`

	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	// Defaults to 0
	PresencePenalty float64 `json:"presence_penalty,omitempty"`

	// An object specifying the format that the model must output.
	// Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106.
	// Setting to { "type": "json_object" } enables JSON mode, which guarantees the message the model generates is valid JSON.
	// Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message.
	// Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit,
	// resulting in a long-running and seemingly "stuck" request.
	// Also note that the message content may be partially cut off if finish_reason="length",
	// which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
	ResponseFormat map[string]any `json:"response_format,omitempty"`

	// This feature is in Beta. If specified, our system will make a best effort to sample deterministically,
	// such that repeated requests with the same seed and parameters should return the same result.
	// Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.
	Seed int `json:"seed,omitempty"`

	// Up to 4 sequences where the API will stop generating further tokens.
	Stop any `json:"stop,omitempty"`

	// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
	// Defaults to false
	Stream bool `json:"stream,omitempty"`

	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	// We generally recommend altering this or top_p but not both.
	// Defaults to 1
	Temperature float64 `json:"temperature,omitempty"`

	// A list of tools the model may call.
	// Currently, only functions are supported as a tool.
	// Use this to provide a list of functions the model may generate JSON inputs for.
	Tools []any `json:"tools,omitempty"`

	// Controls which (if any) function is called by the model.
	// none means the model will not call a function and instead generates a message.
	// auto means the model can pick between generating a message or calling a function.
	// Specifying a particular function via {"type": "function", "function": {"name": "my_function"}} forces the model to call that function.
	// none is the default when no functions are present. auto is the default if functions are present.
	ToolChoice any `json:"tool_choice,omitempty"`

	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	// We generally recommend altering this or temperature but not both.
	// Defaults to 1
	TopP float64 `json:"top_p,omitempty"`

	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
	User string `json:"user,omitempty"`

	// Deprecated in favor of tools. A list of functions the model may generate JSON inputs for.
	Functions []*ChatFunction `json:"functions,omitempty"`

	// Deprecated in favor of tool_choice. Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function. Specifying a particular function via {"name":\ "my_function"} forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.
	FunctionCall string `json:"function_call,omitempty"`
}

func (cc *ChatCompletionRequest) AddMessage(cm *ChatMessage) {
	cc.Messages = append(cc.Messages, cm)
}

func (cc *ChatCompletionRequest) MessageRuneCount() int {
	cnt := 0
	for _, cm := range cc.Messages {
		cnt += str.RuneCount(cm.Content)
	}
	return cnt
}

func (cc *ChatCompletionRequest) String() string {
	return toJSONIndent(cc)
}

type ChatChoice struct {
	Index        int         `json:"index"`
	Message      ChatMessage `json:"message"`
	Logprobs     any         `json:"logprobs,omitempty"`
	FinishReason string      `json:"finish_reason"`
}

type ChatUsage struct {
	PromptTokens     int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

func (cu *ChatUsage) Add(u *ChatUsage) {
	cu.PromptTokens += u.PromptTokens
	cu.CompletionTokens += u.CompletionTokens
	cu.TotalTokens += u.TotalTokens
}

func (cu *ChatUsage) String() string {
	return fmt.Sprintf("%d, %d, %d", cu.PromptTokens, cu.CompletionTokens, cu.TotalTokens)
}

type ChatCompletionResponse struct {
	ID                string        `json:"id,omitempty"`
	Object            string        `json:"object,omitempty"`
	Created           int64         `json:"created,omitempty"`
	Model             string        `json:"model,omitempty"`
	SystemFingerprint string        `json:"system_fingerprint,omitempty"`
	Choices           []*ChatChoice `json:"choices,omitempty"`
	Usage             ChatUsage     `json:"usage,omitempty"`
}

// Answer return first choice content
func (cc *ChatCompletionResponse) Answer() string {
	if len(cc.Choices) > 0 {
		return cc.Choices[0].Message.Content
	}
	return ""
}

func (cc *ChatCompletionResponse) ChoiceRuneCount() int {
	cnt := 0
	for _, c := range cc.Choices {
		cnt += str.RuneCount(c.Message.Content)
	}
	return cnt
}

func (cc *ChatCompletionResponse) String() string {
	return toJSONIndent(cc)
}
